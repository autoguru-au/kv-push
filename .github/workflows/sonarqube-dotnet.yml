name: SonarQube Analysis (.NET)

on:
  workflow_call:
    inputs:
      enable_tests:
        required: false
        type: boolean
        default: true
    secrets:
      SONAR_HOST_URL:
        required: true
      SONAR_TOKEN:
        required: true

jobs:
  sonarqube:
    name: Analyze .NET with SonarQube
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install Sonar Scanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Install Coverlet
        if: inputs.enable_tests == true
        run: dotnet tool install --global coverlet.console

      - name: Start SonarQube Analysis
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin \
            /k:'${{ github.event.repository.name }}' \
            /d:sonar.host.url='${{ secrets.SONAR_HOST_URL }}' \
            /d:sonar.login='${{ secrets.SONAR_TOKEN }}' \
            /d:sonar.cs.opencover.reportsPaths='TestResults/coverage.opencover.xml'

      - name: Build Solution
        run: dotnet build --configuration Release

      - name: Run Tests with Coverage
        if: inputs.enable_tests == true
        run: |
          dotnet test --configuration Release \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=opencover \
            /p:CoverletOutput=./TestResults/coverage.opencover.xml

      - name: Finish SonarQube Analysis
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner end /d:sonar.login='${{ secrets.SONAR_TOKEN }}'
